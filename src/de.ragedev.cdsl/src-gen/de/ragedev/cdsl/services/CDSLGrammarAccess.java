/*
 * generated by Xtext 2.9.1
 */
package de.ragedev.cdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ragedev.cdsl.CDSL.Domainmodel");
		private final Assignment cEntriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntriesAbstractEntryParserRuleCall_0 = (RuleCall)cEntriesAssignment.eContents().get(0);
		
		//Domainmodel:
		//	entries+=AbstractEntry*;
		@Override public ParserRule getRule() { return rule; }
		
		//entries+=AbstractEntry*
		public Assignment getEntriesAssignment() { return cEntriesAssignment; }
		
		//AbstractEntry
		public RuleCall getEntriesAbstractEntryParserRuleCall_0() { return cEntriesAbstractEntryParserRuleCall_0; }
	}
	public class AbstractEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ragedev.cdsl.CDSL.AbstractEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDValidatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentDescriptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractEntry:
		//	DValidator | ComponentDescription;
		@Override public ParserRule getRule() { return rule; }
		
		//DValidator | ComponentDescription
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DValidator
		public RuleCall getDValidatorParserRuleCall_0() { return cDValidatorParserRuleCall_0; }
		
		//ComponentDescription
		public RuleCall getComponentDescriptionParserRuleCall_1() { return cComponentDescriptionParserRuleCall_1; }
	}
	public class DValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ragedev.cdsl.CDSL.DValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDvalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValNameIDTerminalRuleCall_1_0 = (RuleCall)cValNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCompsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRefComponentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRefComponentsComponentDescriptionCrossReference_5_0 = (CrossReference)cRefComponentsAssignment_5.eContents().get(0);
		private final RuleCall cRefComponentsComponentDescriptionIDTerminalRuleCall_5_0_1 = (RuleCall)cRefComponentsComponentDescriptionCrossReference_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DValidator:
		//	'dval' valName=ID
		//	'{'
		//	'comps' ':' refComponents+=[ComponentDescription]+ ';'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'dval' valName=ID '{' 'comps' ':' refComponents+=[ComponentDescription]+ ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'dval'
		public Keyword getDvalKeyword_0() { return cDvalKeyword_0; }
		
		//valName=ID
		public Assignment getValNameAssignment_1() { return cValNameAssignment_1; }
		
		//ID
		public RuleCall getValNameIDTerminalRuleCall_1_0() { return cValNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'comps'
		public Keyword getCompsKeyword_3() { return cCompsKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//refComponents+=[ComponentDescription]+
		public Assignment getRefComponentsAssignment_5() { return cRefComponentsAssignment_5; }
		
		//[ComponentDescription]
		public CrossReference getRefComponentsComponentDescriptionCrossReference_5_0() { return cRefComponentsComponentDescriptionCrossReference_5_0; }
		
		//ID
		public RuleCall getRefComponentsComponentDescriptionIDTerminalRuleCall_5_0_1() { return cRefComponentsComponentDescriptionIDTerminalRuleCall_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ComponentDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ragedev.cdsl.CDSL.ComponentDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortsPortsParserRuleCall_3_0 = (RuleCall)cPortsAssignment_3.eContents().get(0);
		private final Assignment cUnitsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitsUnitElementsParserRuleCall_4_0 = (RuleCall)cUnitsAssignment_4.eContents().get(0);
		private final Assignment cNotAllowedRefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNotAllowedRefNotAllowedRefParserRuleCall_5_0 = (RuleCall)cNotAllowedRefAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ComponentDescription:
		//	'comp' name=ID
		//	'{'
		//	ports=Ports?
		//	units=UnitElements?
		//	notAllowedRef=NotAllowedRef?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'comp' name=ID '{' ports=Ports? units=UnitElements? notAllowedRef=NotAllowedRef? '}'
		public Group getGroup() { return cGroup; }
		
		//'comp'
		public Keyword getCompKeyword_0() { return cCompKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ports=Ports?
		public Assignment getPortsAssignment_3() { return cPortsAssignment_3; }
		
		//Ports
		public RuleCall getPortsPortsParserRuleCall_3_0() { return cPortsPortsParserRuleCall_3_0; }
		
		//units=UnitElements?
		public Assignment getUnitsAssignment_4() { return cUnitsAssignment_4; }
		
		//UnitElements
		public RuleCall getUnitsUnitElementsParserRuleCall_4_0() { return cUnitsUnitElementsParserRuleCall_4_0; }
		
		//notAllowedRef=NotAllowedRef?
		public Assignment getNotAllowedRefAssignment_5() { return cNotAllowedRefAssignment_5; }
		
		//NotAllowedRef
		public RuleCall getNotAllowedRefNotAllowedRefParserRuleCall_5_0() { return cNotAllowedRefNotAllowedRefParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PortsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ragedev.cdsl.CDSL.Ports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortQualifiedNameParserRuleCall_2_0 = (RuleCall)cPortAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Ports:
		//	'ports' ':' port+=QualifiedName+ ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ports' ':' port+=QualifiedName+ ';'
		public Group getGroup() { return cGroup; }
		
		//'ports'
		public Keyword getPortsKeyword_0() { return cPortsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//port+=QualifiedName+
		public Assignment getPortAssignment_2() { return cPortAssignment_2; }
		
		//QualifiedName
		public RuleCall getPortQualifiedNameParserRuleCall_2_0() { return cPortQualifiedNameParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class NotAllowedRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ragedev.cdsl.CDSL.NotAllowedRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForbiddenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUnitsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cUnitsComponentDescriptionCrossReference_2_0 = (CrossReference)cUnitsAssignment_2.eContents().get(0);
		private final RuleCall cUnitsComponentDescriptionIDTerminalRuleCall_2_0_1 = (RuleCall)cUnitsComponentDescriptionCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NotAllowedRef:
		//	'forbidden' ':' units+=[ComponentDescription]+ ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'forbidden' ':' units+=[ComponentDescription]+ ';'
		public Group getGroup() { return cGroup; }
		
		//'forbidden'
		public Keyword getForbiddenKeyword_0() { return cForbiddenKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//units+=[ComponentDescription]+
		public Assignment getUnitsAssignment_2() { return cUnitsAssignment_2; }
		
		//[ComponentDescription]
		public CrossReference getUnitsComponentDescriptionCrossReference_2_0() { return cUnitsComponentDescriptionCrossReference_2_0; }
		
		//ID
		public RuleCall getUnitsComponentDescriptionIDTerminalRuleCall_2_0_1() { return cUnitsComponentDescriptionIDTerminalRuleCall_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class UnitElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ragedev.cdsl.CDSL.UnitElements");
		private final Assignment cUnitAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnitComponentIDParserRuleCall_0 = (RuleCall)cUnitAssignment.eContents().get(0);
		
		//UnitElements:
		//	unit+=ComponentID+;
		@Override public ParserRule getRule() { return rule; }
		
		//unit+=ComponentID+
		public Assignment getUnitAssignment() { return cUnitAssignment; }
		
		//ComponentID
		public RuleCall getUnitComponentIDParserRuleCall_0() { return cUnitComponentIDParserRuleCall_0; }
	}
	public class ComponentIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ragedev.cdsl.CDSL.ComponentID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQualifiedNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualifiedNamesQualifiedNameParserRuleCall_2_0 = (RuleCall)cQualifiedNamesAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComponentID:
		//	'idents' ':' qualifiedNames+=QualifiedName+ ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'idents' ':' qualifiedNames+=QualifiedName+ ';'
		public Group getGroup() { return cGroup; }
		
		//'idents'
		public Keyword getIdentsKeyword_0() { return cIdentsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//qualifiedNames+=QualifiedName+
		public Assignment getQualifiedNamesAssignment_2() { return cQualifiedNamesAssignment_2; }
		
		//QualifiedName
		public RuleCall getQualifiedNamesQualifiedNameParserRuleCall_2_0() { return cQualifiedNamesQualifiedNameParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ragedev.cdsl.CDSL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWildCardIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cWildCardIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	WildCardID ('.' WildCardID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//WildCardID ('.' WildCardID)*
		public Group getGroup() { return cGroup; }
		
		//WildCardID
		public RuleCall getWildCardIDParserRuleCall_0() { return cWildCardIDParserRuleCall_0; }
		
		//('.' WildCardID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//WildCardID
		public RuleCall getWildCardIDParserRuleCall_1_1() { return cWildCardIDParserRuleCall_1_1; }
	}
	public class WildCardIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.ragedev.cdsl.CDSL.WildCardID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//WildCardID:
		//	ID '*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '*'?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'*'?
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final AbstractEntryElements pAbstractEntry;
	private final DValidatorElements pDValidator;
	private final ComponentDescriptionElements pComponentDescription;
	private final PortsElements pPorts;
	private final NotAllowedRefElements pNotAllowedRef;
	private final UnitElementsElements pUnitElements;
	private final ComponentIDElements pComponentID;
	private final QualifiedNameElements pQualifiedName;
	private final WildCardIDElements pWildCardID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pAbstractEntry = new AbstractEntryElements();
		this.pDValidator = new DValidatorElements();
		this.pComponentDescription = new ComponentDescriptionElements();
		this.pPorts = new PortsElements();
		this.pNotAllowedRef = new NotAllowedRefElements();
		this.pUnitElements = new UnitElementsElements();
		this.pComponentID = new ComponentIDElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pWildCardID = new WildCardIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.ragedev.cdsl.CDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	entries+=AbstractEntry*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//AbstractEntry:
	//	DValidator | ComponentDescription;
	public AbstractEntryElements getAbstractEntryAccess() {
		return pAbstractEntry;
	}
	
	public ParserRule getAbstractEntryRule() {
		return getAbstractEntryAccess().getRule();
	}
	
	//DValidator:
	//	'dval' valName=ID
	//	'{'
	//	'comps' ':' refComponents+=[ComponentDescription]+ ';'
	//	'}';
	public DValidatorElements getDValidatorAccess() {
		return pDValidator;
	}
	
	public ParserRule getDValidatorRule() {
		return getDValidatorAccess().getRule();
	}
	
	//ComponentDescription:
	//	'comp' name=ID
	//	'{'
	//	ports=Ports?
	//	units=UnitElements?
	//	notAllowedRef=NotAllowedRef?
	//	'}';
	public ComponentDescriptionElements getComponentDescriptionAccess() {
		return pComponentDescription;
	}
	
	public ParserRule getComponentDescriptionRule() {
		return getComponentDescriptionAccess().getRule();
	}
	
	//Ports:
	//	'ports' ':' port+=QualifiedName+ ';';
	public PortsElements getPortsAccess() {
		return pPorts;
	}
	
	public ParserRule getPortsRule() {
		return getPortsAccess().getRule();
	}
	
	//NotAllowedRef:
	//	'forbidden' ':' units+=[ComponentDescription]+ ';';
	public NotAllowedRefElements getNotAllowedRefAccess() {
		return pNotAllowedRef;
	}
	
	public ParserRule getNotAllowedRefRule() {
		return getNotAllowedRefAccess().getRule();
	}
	
	//UnitElements:
	//	unit+=ComponentID+;
	public UnitElementsElements getUnitElementsAccess() {
		return pUnitElements;
	}
	
	public ParserRule getUnitElementsRule() {
		return getUnitElementsAccess().getRule();
	}
	
	//ComponentID:
	//	'idents' ':' qualifiedNames+=QualifiedName+ ';';
	public ComponentIDElements getComponentIDAccess() {
		return pComponentID;
	}
	
	public ParserRule getComponentIDRule() {
		return getComponentIDAccess().getRule();
	}
	
	//QualifiedName:
	//	WildCardID ('.' WildCardID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//WildCardID:
	//	ID '*'?;
	public WildCardIDElements getWildCardIDAccess() {
		return pWildCardID;
	}
	
	public ParserRule getWildCardIDRule() {
		return getWildCardIDAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
