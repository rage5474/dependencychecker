/*
 * generated by Xtext 2.9.1
 */
grammar InternalCDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.ragedev.cdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.ragedev.cdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.ragedev.cdsl.services.CDSLGrammarAccess;

}

@parser::members {

 	private CDSLGrammarAccess grammarAccess;

    public InternalCDSLParser(TokenStream input, CDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";
   	}

   	@Override
   	protected CDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	iv_ruleDomainmodel=ruleDomainmodel
	{ $current=$iv_ruleDomainmodel.current; }
	EOF;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainmodelAccess().getEntriesAbstractEntryParserRuleCall_0());
			}
			lv_entries_0_0=ruleAbstractEntry
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
				}
				add(
					$current,
					"entries",
					lv_entries_0_0,
					"de.ragedev.cdsl.CDSL.AbstractEntry");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAbstractEntry
entryRuleAbstractEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractEntryRule()); }
	iv_ruleAbstractEntry=ruleAbstractEntry
	{ $current=$iv_ruleAbstractEntry.current; }
	EOF;

// Rule AbstractEntry
ruleAbstractEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractEntryAccess().getDValidatorParserRuleCall_0());
		}
		this_DValidator_0=ruleDValidator
		{
			$current = $this_DValidator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractEntryAccess().getComponentDescriptionParserRuleCall_1());
		}
		this_ComponentDescription_1=ruleComponentDescription
		{
			$current = $this_ComponentDescription_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDValidator
entryRuleDValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDValidatorRule()); }
	iv_ruleDValidator=ruleDValidator
	{ $current=$iv_ruleDValidator.current; }
	EOF;

// Rule DValidator
ruleDValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dval'
		{
			newLeafNode(otherlv_0, grammarAccess.getDValidatorAccess().getDvalKeyword_0());
		}
		(
			(
				lv_valName_1_0=RULE_ID
				{
					newLeafNode(lv_valName_1_0, grammarAccess.getDValidatorAccess().getValNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"valName",
						lv_valName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDValidatorAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='comps'
		{
			newLeafNode(otherlv_3, grammarAccess.getDValidatorAccess().getCompsKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getDValidatorAccess().getColonKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDValidatorRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getDValidatorAccess().getRefComponentsComponentDescriptionCrossReference_5_0());
				}
			)
		)+
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDValidatorAccess().getSemicolonKeyword_6());
		}
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getDValidatorAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleComponentDescription
entryRuleComponentDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentDescriptionRule()); }
	iv_ruleComponentDescription=ruleComponentDescription
	{ $current=$iv_ruleComponentDescription.current; }
	EOF;

// Rule ComponentDescription
ruleComponentDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='comp'
		{
			newLeafNode(otherlv_0, grammarAccess.getComponentDescriptionAccess().getCompKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getComponentDescriptionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentDescriptionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getComponentDescriptionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentDescriptionAccess().getPortsPortsParserRuleCall_3_0());
				}
				lv_ports_3_0=rulePorts
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentDescriptionRule());
					}
					set(
						$current,
						"ports",
						lv_ports_3_0,
						"de.ragedev.cdsl.CDSL.Ports");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentDescriptionAccess().getUnitsUnitElementsParserRuleCall_4_0());
				}
				lv_units_4_0=ruleUnitElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentDescriptionRule());
					}
					set(
						$current,
						"units",
						lv_units_4_0,
						"de.ragedev.cdsl.CDSL.UnitElements");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentDescriptionAccess().getNotAllowedRefNotAllowedRefParserRuleCall_5_0());
				}
				lv_notAllowedRef_5_0=ruleNotAllowedRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentDescriptionRule());
					}
					set(
						$current,
						"notAllowedRef",
						lv_notAllowedRef_5_0,
						"de.ragedev.cdsl.CDSL.NotAllowedRef");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getComponentDescriptionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRulePorts
entryRulePorts returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortsRule()); }
	iv_rulePorts=rulePorts
	{ $current=$iv_rulePorts.current; }
	EOF;

// Rule Ports
rulePorts returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ports'
		{
			newLeafNode(otherlv_0, grammarAccess.getPortsAccess().getPortsKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPortsAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPortsAccess().getPortQualifiedNameParserRuleCall_2_0());
				}
				lv_port_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPortsRule());
					}
					add(
						$current,
						"port",
						lv_port_2_0,
						"de.ragedev.cdsl.CDSL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getPortsAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleNotAllowedRef
entryRuleNotAllowedRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotAllowedRefRule()); }
	iv_ruleNotAllowedRef=ruleNotAllowedRef
	{ $current=$iv_ruleNotAllowedRef.current; }
	EOF;

// Rule NotAllowedRef
ruleNotAllowedRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='forbidden'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotAllowedRefAccess().getForbiddenKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getNotAllowedRefAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotAllowedRefRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getNotAllowedRefAccess().getUnitsComponentDescriptionCrossReference_2_0());
				}
			)
		)+
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getNotAllowedRefAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleUnitElements
entryRuleUnitElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitElementsRule()); }
	iv_ruleUnitElements=ruleUnitElements
	{ $current=$iv_ruleUnitElements.current; }
	EOF;

// Rule UnitElements
ruleUnitElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getUnitElementsAccess().getUnitComponentIDParserRuleCall_0());
			}
			lv_unit_0_0=ruleComponentID
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getUnitElementsRule());
				}
				add(
					$current,
					"unit",
					lv_unit_0_0,
					"de.ragedev.cdsl.CDSL.ComponentID");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleComponentID
entryRuleComponentID returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentIDRule()); }
	iv_ruleComponentID=ruleComponentID
	{ $current=$iv_ruleComponentID.current; }
	EOF;

// Rule ComponentID
ruleComponentID returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='idents'
		{
			newLeafNode(otherlv_0, grammarAccess.getComponentIDAccess().getIdentsKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getComponentIDAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentIDAccess().getQualifiedNamesQualifiedNameParserRuleCall_2_0());
				}
				lv_qualifiedNames_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentIDRule());
					}
					add(
						$current,
						"qualifiedNames",
						lv_qualifiedNames_2_0,
						"de.ragedev.cdsl.CDSL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getComponentIDAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameAccess().getWildCardIDParserRuleCall_0());
		}
		this_WildCardID_0=ruleWildCardID
		{
			$current.merge(this_WildCardID_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getQualifiedNameAccess().getWildCardIDParserRuleCall_1_1());
			}
			this_WildCardID_2=ruleWildCardID
			{
				$current.merge(this_WildCardID_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleWildCardID
entryRuleWildCardID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWildCardIDRule()); }
	iv_ruleWildCardID=ruleWildCardID
	{ $current=$iv_ruleWildCardID.current.getText(); }
	EOF;

// Rule WildCardID
ruleWildCardID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getWildCardIDAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getWildCardIDAccess().getAsteriskKeyword_1());
			}
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
