/*
 * generated by Xtext 2.9.1
 */
package de.ragedev.cdsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.ragedev.cdsl.ide.contentassist.antlr.internal.InternalCDSLParser;
import de.ragedev.cdsl.services.CDSLGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class CDSLParser extends AbstractContentAssistParser {

	@Inject
	private CDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCDSLParser createParser() {
		InternalCDSLParser result = new InternalCDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractEntryAccess().getAlternatives(), "rule__AbstractEntry__Alternatives");
					put(grammarAccess.getDValidatorAccess().getGroup(), "rule__DValidator__Group__0");
					put(grammarAccess.getComponentDescriptionAccess().getGroup(), "rule__ComponentDescription__Group__0");
					put(grammarAccess.getPortsAccess().getGroup(), "rule__Ports__Group__0");
					put(grammarAccess.getNotAllowedRefAccess().getGroup(), "rule__NotAllowedRef__Group__0");
					put(grammarAccess.getComponentIDAccess().getGroup(), "rule__ComponentID__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getWildCardIDAccess().getGroup(), "rule__WildCardID__Group__0");
					put(grammarAccess.getDomainmodelAccess().getEntriesAssignment(), "rule__Domainmodel__EntriesAssignment");
					put(grammarAccess.getDValidatorAccess().getValNameAssignment_1(), "rule__DValidator__ValNameAssignment_1");
					put(grammarAccess.getDValidatorAccess().getRefComponentsAssignment_5(), "rule__DValidator__RefComponentsAssignment_5");
					put(grammarAccess.getComponentDescriptionAccess().getNameAssignment_1(), "rule__ComponentDescription__NameAssignment_1");
					put(grammarAccess.getComponentDescriptionAccess().getPortsAssignment_3(), "rule__ComponentDescription__PortsAssignment_3");
					put(grammarAccess.getComponentDescriptionAccess().getUnitsAssignment_4(), "rule__ComponentDescription__UnitsAssignment_4");
					put(grammarAccess.getComponentDescriptionAccess().getNotAllowedRefAssignment_5(), "rule__ComponentDescription__NotAllowedRefAssignment_5");
					put(grammarAccess.getPortsAccess().getPortAssignment_2(), "rule__Ports__PortAssignment_2");
					put(grammarAccess.getNotAllowedRefAccess().getUnitsAssignment_2(), "rule__NotAllowedRef__UnitsAssignment_2");
					put(grammarAccess.getUnitElementsAccess().getUnitAssignment(), "rule__UnitElements__UnitAssignment");
					put(grammarAccess.getComponentIDAccess().getQualifiedNamesAssignment_2(), "rule__ComponentID__QualifiedNamesAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalCDSLParser typedParser = (InternalCDSLParser) parser;
			typedParser.entryRuleDomainmodel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
